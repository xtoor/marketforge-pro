#!/bin/bash
#
# MarketForge Pro - Automated Setup Script
# This script will install all dependencies, configure the environment,
# and start the application.
#

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

print_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_header() {
    echo ""
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
}

# Check if running in interactive mode
if [ -t 0 ]; then
    INTERACTIVE=true
else
    INTERACTIVE=false
fi

print_header "MarketForge Pro - Setup & Installation"

# Detect OS
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
else
    print_error "Unsupported OS: $OSTYPE"
    exit 1
fi

print_info "Detected OS: $OS"

# Check prerequisites
print_header "Step 1: Checking Prerequisites"

# Check Python
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
    print_success "Python $PYTHON_VERSION found"
else
    print_error "Python 3 is not installed. Please install Python 3.9 or higher."
    exit 1
fi

# Check Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_success "Node.js $NODE_VERSION found"
else
    print_error "Node.js is not installed. Please install Node.js 18 or higher."
    exit 1
fi

# Check npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_success "npm $NPM_VERSION found"
else
    print_error "npm is not installed."
    exit 1
fi

# Check if TA-Lib is installed (system library)
print_header "Step 2: Checking TA-Lib Installation"

if ldconfig -p 2>/dev/null | grep -q libta_lib || [ -f /usr/local/lib/libta_lib.so ]; then
    print_success "TA-Lib system library found"
    TALIB_INSTALLED=true
else
    print_warning "TA-Lib system library not found"
    TALIB_INSTALLED=false

    if [ "$INTERACTIVE" = true ]; then
        echo ""
        read -p "Would you like to install TA-Lib now? (y/n) " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_info "Installing TA-Lib..."

            cd /tmp
            if [ ! -f ta-lib-0.4.0-src.tar.gz ]; then
                wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
            fi

            tar -xzf ta-lib-0.4.0-src.tar.gz
            cd ta-lib
            ./configure --prefix=/usr/local
            make
            sudo make install
            sudo ldconfig

            print_success "TA-Lib installed successfully"
            TALIB_INSTALLED=true
        else
            print_warning "Skipping TA-Lib installation. Pine Script execution will not work."
        fi
    else
        print_warning "Running in non-interactive mode. Skipping TA-Lib installation."
        print_info "To install TA-Lib manually, see: PINESCRIPT_INTEGRATION.md"
    fi
fi

# Create Python virtual environment
print_header "Step 3: Setting Up Python Environment"

if [ ! -d "venv" ]; then
    print_info "Creating Python virtual environment..."
    python3 -m venv venv
    print_success "Virtual environment created"
else
    print_success "Virtual environment already exists"
fi

# Activate virtual environment
source venv/bin/activate
print_success "Virtual environment activated"

# Install Python dependencies
print_info "Installing Python dependencies..."
pip install --upgrade pip > /dev/null
pip install -r backend/requirements.txt
print_success "Python dependencies installed"

# Install TA-Lib Python wrapper if system library is available
if [ "$TALIB_INSTALLED" = true ]; then
    print_info "Installing TA-Lib Python wrapper..."
    pip install ta-lib
    print_success "TA-Lib Python wrapper installed"
fi

# Install Node.js dependencies
print_header "Step 4: Installing Node.js Dependencies"

print_info "Installing frontend dependencies (this may take a few minutes)..."
npm install
print_success "Node.js dependencies installed"

# Create environment files
print_header "Step 5: Configuring Environment"

# Get local IP address
if [ "$OS" = "linux" ]; then
    LOCAL_IP=$(hostname -I | awk '{print $1}')
elif [ "$OS" = "macos" ]; then
    LOCAL_IP=$(ipconfig getifaddr en0 || ipconfig getifaddr en1 || echo "localhost")
fi

print_info "Detected IP address: $LOCAL_IP"

# Create .env file for backend
cat > .env << EOF
# Backend Environment Variables
# Generated by setup.sh on $(date)

# CORS Configuration
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://$LOCAL_IP:3000

# Feature Toggles
ENABLE_BROKERS=false
ENABLE_RESONANCE=true
ENABLE_ML_STRATEGIES=true

# App Configuration
APP_ENV=development
DEBUG=true
EOF

print_success "Created .env file"

# Create .env.local for frontend (Vite)
cat > .env.local << EOF
# Frontend Environment Variables
# Generated by setup.sh on $(date)

VITE_API_URL=http://$LOCAL_IP:8000
EOF

print_success "Created .env.local file"

# Run tests
print_header "Step 6: Running Tests"

if [ "$INTERACTIVE" = true ]; then
    read -p "Would you like to run tests? (y/n) " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Running integration tests..."
        if [ "$TALIB_INSTALLED" = true ]; then
            python test_pinescript_integration.py
            print_success "Tests passed"
        else
            print_warning "Skipping tests (TA-Lib not installed)"
        fi
    fi
else
    print_info "Skipping tests in non-interactive mode"
fi

# Installation complete
print_header "âœ“ Installation Complete!"

echo ""
print_success "MarketForge Pro is ready to use!"
echo ""
print_info "Your configuration:"
echo "  â€¢ Backend API: http://$LOCAL_IP:8000"
echo "  â€¢ Frontend:    http://$LOCAL_IP:3000"
echo "  â€¢ TA-Lib:      $([ "$TALIB_INSTALLED" = true ] && echo "Installed âœ“" || echo "Not installed âš ")"
echo ""

# Ask if user wants to start the server
if [ "$INTERACTIVE" = true ]; then
    echo ""
    read -p "Would you like to start the servers now? (y/n) " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_header "Starting Servers"

        # Create start script if it doesn't exist
        if [ ! -f "start-servers.sh" ]; then
            cat > start-servers.sh << 'STARTEOF'
#!/bin/bash
cd "$(dirname "$0")"

# Kill any existing processes
pkill -9 -f "uvicorn.*8000" 2>/dev/null
pkill -9 -f "vite.*3000" 2>/dev/null
sleep 2

# Start backend
source venv/bin/activate
uvicorn backend.api.main:app --host 0.0.0.0 --port 8000 --reload > /tmp/marketforge-backend.log 2>&1 &
BACKEND_PID=$!

# Start frontend
npm run dev -- --host 0.0.0.0 > /tmp/marketforge-frontend.log 2>&1 &
FRONTEND_PID=$!

sleep 5

echo "================================================"
echo "MARKETFORGE PRO - SERVERS STARTED"
echo "================================================"
echo "Backend PID: $BACKEND_PID (port 8000)"
echo "Frontend PID: $FRONTEND_PID (port 3000)"
echo ""
echo "Access the app at:"
echo "  http://localhost:3000"
echo ""
echo "Logs:"
echo "  Backend: tail -f /tmp/marketforge-backend.log"
echo "  Frontend: tail -f /tmp/marketforge-frontend.log"
echo "================================================"

# Check if services are running
sleep 2
curl -s http://localhost:8000/api/health >/dev/null && echo "âœ“ Backend is healthy" || echo "âœ— Backend failed to start"
curl -s http://localhost:3000 >/dev/null && echo "âœ“ Frontend is running" || echo "âœ— Frontend failed to start"
STARTEOF
            chmod +x start-servers.sh
        fi

        bash start-servers.sh
    else
        echo ""
        print_info "To start the servers later, run:"
        echo "  bash start-servers.sh"
        echo ""
        print_info "Or manually:"
        echo "  # Terminal 1 - Backend:"
        echo "  source venv/bin/activate"
        echo "  uvicorn backend.api.main:app --host 0.0.0.0 --port 8000 --reload"
        echo ""
        echo "  # Terminal 2 - Frontend:"
        echo "  npm run dev -- --host 0.0.0.0"
        echo ""
    fi
else
    echo ""
    print_info "To start the servers, run:"
    echo "  bash start-servers.sh"
    echo ""
fi

print_header "Setup Complete! ðŸŽ‰"
